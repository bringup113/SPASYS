version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:14-alpine
    container_name: spa-postgres
    environment:
      POSTGRES_DB: spa_system
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - spa-network
    restart: unless-stopped

  # pgAdmin数据库管理工具
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: spa-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@spa.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - spa-network
    depends_on:
      - postgres
    restart: unless-stopped

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: spa-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - spa-network
    restart: unless-stopped

  # 后端API服务器（包含数据库初始化）
  backend:
    image: node:18-alpine
    container_name: spa-backend
    working_dir: /app
    command: >
      sh -c "
        cp -r /src/* . &&
        npm install --only=production &&
        echo '等待数据库启动...' &&
        sleep 15 &&
        echo '初始化数据库...' &&
        node init-db.js &&
        echo '启动服务器...' &&
        npm start
      "
    environment:
      - DB_USER=postgres
      - DB_HOST=postgres
      - DB_NAME=spa_system
      - DB_PASSWORD=password
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379
      - PORT=3001
    ports:
      - "3001:3001"
    volumes:
      - ./server:/src
    networks:
      - spa-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # 前端应用
  frontend:
    image: node:18-alpine
    container_name: spa-frontend
    working_dir: /app
    command: >
      sh -c "
        cp -r /src/* . &&
        npm install &&
        npm run dev -- --host 0.0.0.0
      "
    environment:
      - VITE_API_URL=/api
    ports:
      - "5173:5173"
    volumes:
      - .:/src
    networks:
      - spa-network
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
  pgadmin_data:
  redis_data:

networks:
  spa-network:
    driver: bridge